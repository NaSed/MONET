te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, type='test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, type='train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, type='AvgTr'))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("blue", "darkgreen","red", "skyblue", "green", "yellow"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("red", "blue", "darkgreen", "yellow","skyblue", "green"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("yellow", "blue", "darkgreen", "red","skyblue", "green"))
View(avg.err)
View(te.err)
View(tr.err)
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
i <- 1
for ( i in 1:rep)
{
nvar <- 1
for (nvar in 2:p)
{
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
pred <- predict.lm(lm, test)
te.err[i, nvar] <- mean((test$Y - pred)^2)
avg.err[i, nvar] <- mean(c(tr.err[i, nvar], te.err[i, nvar]))
}
}
avg.te <- apply(te.err, 2, mean)
avg.tr <- apply(tr.err, 2, mean)
avg.avg <- apply(avg.err, 2, mean)
dim(te.err)
colnames(te.err) <- 1:p
colnames(tr.err) <- 1:p
#################
te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, type='test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, type='train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, type='AvgTr'))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("yellow", "blue", "darkgreen", "red","skyblue", "green"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("yellow", "blue", "darkolivegreen", "red","skyblue", "darkolivegreen1"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("yellow", "blue", "darkolivegreen", "red","skyblue", "darkolivegreen3"))
te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, type='Test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, type='Train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, type='AvgTr'))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("yellow", "blue", "darkolivegreen", "red","skyblue", "darkolivegreen3"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen3"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=2)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen3"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen3"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen1"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "darkolivegreen4"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "maroon4"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "red"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = rep(c("darkorange1","skyblue", "red3"),2))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange1","skyblue", "red3", "darkorange1","blue", "red"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "red", "darkorange1","skyblue", "red3"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
+ xlab("Model complexity/Flexibility") + ylab("MSE")
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity/Flexibility") + ylab("MSE")
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE")
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") +
+ theme(axis.title = element_text(size = rel(1.5)))
ggplot(data=whole, aes(x = Nvar, y = value, colour = type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") +
theme(axis.title = element_text(size = rel(1.5)))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") +
theme(axis.title = element_text(size = rel(1.5)), legend.text= element_text(size = rel(1.5)))
te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, Type='Test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, Type='Train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, Type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, Type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, Type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, Type='AvgTr'))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") +
theme(axis.title = element_text(size = rel(1.5)), legend.text= element_text(size = rel(1.5)))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") +
#   theme(axis.title = element_text(size = rel(1.5)))+
theme(legend.text=element_text(size=15),
text = element_text(size=15), aspect.ratio=1)
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + title("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
Figure_path <- "C:/Users/sedaghat/Dropbox/Toxicology_Omics/Docs/Figures/"
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat), size=1.05)+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
nvar <- 1
i <- 1
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
pred <- predict.lm(lm, test)
pred
test$Y
test$Y - pred
(test$Y - pred)^2
mean((test$Y - pred)^2)
te.err[i, nvar] <- mean((test$Y - pred)^2)
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
i <- 1
nvar <- 1
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
pred <- predict.lm(lm, test)
pred <- predict.lm(lm, test)
test
colnames(train)
colnames(test)
colnames(test) <- colnames(train)
pred <- predict.lm(lm, test)
te.err[i, nvar] <- mean((test$Y - pred)^2)
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
i <- 1
nvar <- 1
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
colnames(test) <- colnames(train)
pred <- predict.lm(lm, test)
te.err[i, nvar] <- mean((test$Y - pred)^2)
rm(list=ls())
library(reshape2)
library(ggplot2)
set.seed(12)
Figure_path <- "C:/Users/sedaghat/Dropbox/Toxicology_Omics/Docs/Figures/"
n <- 100
p <- 50
val <- 10 # number of variables which their corresponding beta is not zero
x <- matrix(rnorm(n * p , mean = 0, sd = 1), ncol=p, nrow= n)
colnames(x) <- paste('X', 1:p, sep='')
beta <- matrix(0 , ncol=1, nrow=p)
beta [1:val] <- rnorm(val, mean = 0, sd = 1)
y <- x %*% beta + rnorm(n)
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
i <- 1
for ( i in 1:rep)
{
nvar <- 1
for (nvar in 2:p)
{
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
colnames(test) <- colnames(train)
pred <- predict.lm(lm, test)
te.err[i, nvar] <- mean((test$Y - pred)^2)
avg.err[i, nvar] <- mean(c(tr.err[i, nvar], te.err[i, nvar]))
}
}
avg.te <- apply(te.err, 2, mean)
avg.tr <- apply(tr.err, 2, mean)
avg.avg <- apply(avg.err, 2, mean)
dim(te.err)
colnames(te.err) <- 1:p
colnames(tr.err) <- 1:p
#################
te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, Type='Test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, Type='Train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, Type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, Type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, Type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, Type='AvgTr'))
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
View(te.err)
rm(list=ls())
library(reshape2)
library(ggplot2)
set.seed(12)
Figure_path <- "C:/Users/sedaghat/Dropbox/Toxicology_Omics/Docs/Figures/"
n <- 100
p <- 50
val <- 10 # number of variables which their corresponding beta is not zero
x <- matrix(rnorm(n * p , mean = 0, sd = 1), ncol=p, nrow= n)
colnames(x) <- paste('X', 1:p, sep='')
beta <- matrix(0 , ncol=1, nrow=p)
beta [1:val] <- rnorm(val, mean = 0, sd = 1)
y <- x %*% beta + rnorm(n)
rep <- 100
tr.err <- te.err <- avg.err <- matrix(0, nrow=rep, ncol=p)
i <- 1
for ( i in 1:rep)
{
nvar <- 1
for (nvar in 1:p)
{
cat('Repeat: ', i, '\t', '#var: ', nvar, '\n')
tr.ind <- sample(1:n, 70)
train <- data.frame(x[tr.ind, 1:nvar], Y=y[tr.ind])
test <- data.frame(x[-tr.ind, 1:nvar], Y=y[-tr.ind])
lm <- lm(Y ~ ., data=train)
tr.err[i, nvar] <- mean(lm$residuals^2)
colnames(test) <- colnames(train)
pred <- predict.lm(lm, test)
te.err[i, nvar] <- mean((test$Y - pred)^2)
avg.err[i, nvar] <- mean(c(tr.err[i, nvar], te.err[i, nvar]))
}
}
avg.te <- apply(te.err, 2, mean)
avg.tr <- apply(tr.err, 2, mean)
avg.avg <- apply(avg.err, 2, mean)
dim(te.err)
colnames(te.err) <- 1:p
colnames(tr.err) <- 1:p
#################
te.melt <- melt(te.err)
te.melt[,1] <- paste('Te', te.melt[,1], sep='')
colnames(te.melt) <- c("Repeat", 'Nvar', "value")
te <- data.frame(te.melt, Type='Test')
tr.melt <- melt(tr.err)
tr.melt[,1] <- paste('Tr', tr.melt[,1], sep='')
colnames(tr.melt) <- c("Repeat", 'Nvar', "value")
tr <- data.frame(tr.melt, Type='Train')
avg.melt <- melt(avg.err)
avg.melt[,1] <- paste('Avg', avg.melt[,1], sep='')
colnames(avg.melt) <- c("Repeat", 'Nvar', "value")
avg <- data.frame(avg.melt, Type='Avg')
whole <- rbind(tr, te, avg)
avg.whole <- rbind(data.frame(Repeat='avgTe', Nvar=1:p, value=avg.te, Type='AvgTe'),
data.frame(Repeat='avgAvg', Nvar=1:p, value=avg.avg, Type='AvgTrTe'),
data.frame(Repeat='avgTr', Nvar=1:p, value=avg.tr, Type='AvgTr'))
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("red","blue", "seagreen", "darkorange1","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "red","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
pdf(paste(Figure_path, "BiasVariance",".pdf", sep=""))
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("darkorange","blue", "seagreen", "red","skyblue", "seagreen1"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
dev.off()
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("seagreen","blue", "darkorange", "seagreen1","skyblue", "red"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("seagreen1","blue", "red", "seagreen","skyblue", "darkorange"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
ggplot(data=whole, aes(x = Nvar, y = value, colour = Type, group=Repeat)) + geom_line(alpha=0.1) +
geom_line(data=avg.whole, aes(x = Nvar, y = value, group=Repeat))+
scale_colour_manual(values = c("seagreen1", "red", "blue", "seagreen", "darkorange", "skyblue"))+
xlab("Model complexity / Flexibility") + ylab("MSE") + ggtitle("Bias-Variance") +
theme(legend.text=element_text(size=15), text = element_text(size=15), aspect.ratio=1)
install.packages(c("ncvreg", "netgsa"))
install.packages(c("ape", "backports", "base64", "BH", "caret", "checkmate", "circlize", "clusterCrit", "corrplot", "crayon", "curl", "DBI", "dendextend", "DEoptimR", "devtools", "dnet", "dplyr", "evaluate", "FADA", "fastcluster", "fields", "formatR", "FSelector", "GGally", "ggdendro", "ggfortify", "git2r", "GlobalOptions", "highr", "Hmisc", "httr", "installr", "jsonlite", "knitr", "ks", "lava", "lazyeval", "lme4", "manipulate", "matrixStats", "mixOmics", "networkD3", "nleqslv", "nlme", "openssl", "plotrix", "plyr", "pracma", "proxy", "quantreg", "R.utils", "ranger", "Rcpp", "RcppArmadillo", "rmarkdown", "robustbase", "rstudioapi", "rvest", "RWeka", "RWekajars", "scatterplot3d", "sp", "stringi", "swirl", "testthat", "tidyr", "VennDiagram", "VIM", "withr", "XLConnect", "XLConnectJars", "xml2", "zoo"))
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite()
require(igraph)
require(graphite)
require(graphite)
require(igraph)
require(graphite)
require(igraph)
path <- pathways("hsapiens", "biocarta")
## Convert pathways to symbol
path
g_symb <- lapply(1:n_path, function(x) pathwayGraph(path[[x]]))
g_symb <- lapply(1:n_path, function(x) pathwayGraph(path[x]))
n_path <- length(path)
g_symb <- lapply(1:n_path, function(x) pathwayGraph(path[[x]]))
ig_symb <- lapply(1:n_path, function(x) igraph.from.graphNEL(g_symb[[x]],
name = TRUE, weight = TRUE,unlist.attrs = TRUE))
union_g1 <- graph.union(ig_symb, byname = "auto")
union_g1
KEGG.reactions <- keggList("reaction")
# Identifier of reactions
reactions <- substr(names(KEGG.reactions), 4, nchar(names(KEGG.reactions)))
library(KEGGREST)
KEGG.reactions <- keggList("reaction")
KEGG.reactions
reactions <- substr(names(KEGG.reactions), 4, nchar(names(KEGG.reactions)))
reactions
reaction.id <- reactions
substr(reaction.id, 1, 1)
substr(reaction.id, 1, 1)=='R'
(all(substr(reaction.id, 1, 1)=='R'))
reactions <- reactions[1:30]
n <- seq(1, length(reactions), by=10)
if (n[length(n)]!= length(reactions)) n <- c(n, length(reactions))
reaction.info <- list()
for(i in 1:length(n))
{
cat('group ', i, '/', length(n), '\n')
if (i!=length(n)) temp <- keggGet(reactions[n[i]:(n[i+1]-1)]) else temp <- keggGet(reactions[n[i]])
reaction.info[[i]] <- temp
}
# binding reaction info together
all.reaction <- list()
for(i in 1:length(reaction.info))
all.reaction <- c(all.reaction, reaction.info[[i]])
n.reactions <- length(all.reaction)
n.reactions
equations <- sapply(all.reaction, function(x) x$EQUATION)
ind <- grep("<=>", equations ,fixed=TRUE)
length(ind)
ind
equations
pathways <- sapply(all.reaction, function(x) x$PATHWAY)
reactions.id  <- sapply(all.reaction, function(x) x$ENTRY)
reactions.id
reactions
pathways
length(ind)
ind
equations
rm(list=ls())
setwd("C:/Users/sedaghat/Dropbox/MONET_MetabolicNetworks/Code")
cat("\014")
library(R.matlab)
source("RecursiveCalls_Analysis.R")
source("Hypergraph2IncidenceMat.R")
source("DNFGenerating_FK.R")
CNF.l=list(c(1,2,4),(2,3),(1,3,4),(1,3))
CNF.l=list(c(1,2,4),c(2,3),c(1,3,4),c(1,3))
split.methods <- c('lessFreq')#'random', 'mostFreq','adaptive', 'mostFreqSum'
dnf_init.methods <- c('random')#,'combination'
DNFGenerating_FK(cnf=CNF.l, split.method=split.method, infinite.thresh=10, dnf.init=dnf.init)
dnf.init <- c('random')#,'combination'
DNFGenerating_FK(cnf=CNF.l, split.method=split.method, infinite.thresh=10, dnf.init=dnf.init)
split.method <- c('lessFreq')#'random', 'mostFreq','adaptive', 'mostFreqSum'
DNFGenerating_FK(cnf=CNF.l, split.method=split.method, infinite.thresh=10, dnf.init=dnf.init)
